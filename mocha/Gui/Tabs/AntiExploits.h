#pragma once

/* old anti master client gui code
            if (ImAdd::ToggleButtonClassic("Anti-Royalty##339", &masterClientRequest))
                globals::Ihooks::setMasterClient = masterClientRequest;
            ImGui::SetItemTooltip("Block Master Client switch requests.");

            if (masterClientRequest)
            {
                ImGui::Indent(10);
                ImAdd::BeginHighlightGroup();

                ImAdd::ToggleButtonClassic("Debug Anti-Royalty", &masterClientDebug);
                ImGui::SetItemTooltip("Debug Anti-MasterClient.");
                ImAdd::ToggleButtonClassic("Strict (Callback) ##44545", &globals::Ihooks::OnMasterClientSwitched);
                ImGui::SetItemTooltip("Set yourself as master client if a Master Client switch is detected. \nBy callback.");
                ImAdd::ToggleButtonClassic("Force ##44545", &masterClientForceMode);
                ImGui::SetItemTooltip("Set yourself as master client if a Master Client switch is detected. \nBy detection.");
                if (globals::Ihooks::OnMasterClientSwitched || masterClientForceMode)
                {
                    ImAdd::ToggleButtonClassic("Bounce Back ##44", &masterClientBounceBack);
                    ImGui::SetItemTooltip("Bounce back a Crash when someone forces Master Client. \nOnly cheaters and vmods can do this.");
                    if (masterClientBounceBack)
                    {
                        ImGui::Indent(10);
                        ImAdd::BeginHighlightGroup();

                        const char* items[] = {"RAM Crash", "Death"};
                        int current_item = static_cast<int>(masterClientBounceBackMode);

                        ImGui::PushItemWidth(200);
                        if (ImGui::Combo("Mode ##2368712", &current_item, items, IM_ARRAYSIZE(items)))
                        {
                            masterClientBounceBackMode = static_cast<globals::photon::antis::BounceBackMode>(
                                current_item);
                        }
                        ImGui::PopItemWidth();
                        ImGui::SetItemTooltip("RAM Crash: Less stable, more reliable. \nDeath: More stable, less reliable");

                        ImAdd::EndHighlightGroup();
                        ImGui::Indent(-10);
                    }
                }
                if (masterClientForceMode)
                {
                    ImAdd::ToggleButtonClassic("Block Offender's Events ##43434", &masterClientBlockOffender);
                    ImGui::SetItemTooltip("Block the offender's events. ##3434343");
                }

                ImAdd::EndHighlightGroup();
                ImGui::Indent(-10);
            }
*/

void CGui::AntiExploitsTab(ImGuiStyle& style)
{
    ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, style.ItemInnerSpacing);
    ImGui::PushFont(m_Fonts.BigFont);
    {
        ImGui::TextDisabled("Anti-Exploit Modules");
    }
    ImGui::PopFont();
    ImGui::PushStyleColor(ImGuiCol_Border, ImVec4());
    ImGui::BeginChild("Anti-Exploit Modules",ImVec2(0, (ImGui::GetFontSize() * 2 + style.WindowPadding.y * 4 + style.ItemInnerSpacing.y) + (style.WindowPadding.y * 2 + ImGui::GetFontSize() * 6 + style.ItemInnerSpacing.y * 3) + (ImGui::GetFontSize() + style.WindowPadding.y * 2) * 200), ImGuiChildFlags_Border);
    ImGui::PopStyleColor();
    ImGui::PopStyleVar();
    {
        ImGui::SeparatorText("Network");
        {
            using namespace globals::photon::antis::inbound;

            #ifndef PROD

            if (ImGui::CollapsingHeader("Master Client Protections"))
            {
                using namespace globals::photon::protections::master;
                
                ImGui::Indent(10);
                ImAdd::BeginHighlightGroup();

                ImAdd::ToggleButtonClassic("Block Requests ##9811", &globals::Ihooks::setMasterClient);
                ImGui::SetItemTooltip("Anti-Master Client blocking requests. \nThis method blocks requests for you to switch master client.");
                
                if (globals::Ihooks::setMasterClient)
                {
                    ImGui::Indent(10);
                    ImAdd::BeginHighlightGroup();
                    
                    ImAdd::ToggleButtonClassic("During Loading ##9811", &request::duringLoading);
                    ImGui::SetItemTooltip("Block requests while you're loading.");
                    
                    ImAdd::ToggleButtonClassic("Loading Fix ##9811", &request::loadingFix);
                    ImGui::SetItemTooltip("Prevent giving yourself master client during loading. \nThis attempts to fix/mitigate an exploit.");

                    ImAdd::EndHighlightGroup();
                    ImGui::Indent(-10);
                }
                
                ImAdd::ToggleButtonClassic("Anti by Callback ##7611", &globals::Ihooks::OnMasterClientSwitched);
                ImGui::SetItemTooltip("Anti-Master Client using photon callback. \nThis method is less reliable then force.");
                
                if (globals::Ihooks::OnMasterClientSwitched)
                {
                    ImGui::Indent(10);
                    ImAdd::BeginHighlightGroup();
                    
                    ImAdd::ToggleButtonClassic("During Loading ##7611", &callback::duringLoading);
                    ImGui::SetItemTooltip("Allow setting yourself as master client during loading. \nThis can cause you to crash.");
                    
                    ImAdd::ToggleButtonClassic("Loading Fix ##7611", &callback::loadingFix);
                    ImGui::SetItemTooltip("Prevent being master client during loading. \nThis attempts to fix/mitigate an exploit.");
                    
                    ImAdd::ToggleButtonClassic("Restrict Offender ##7611", &callback::restrictOffender);
                    ImGui::SetItemTooltip("\"Restrict\" the offender if flagged. \nYou can only recieve movement packets from a \"Restricted\" player.");
                    
                    ImAdd::ToggleButtonClassic("Bounce Back ##7611", &callback::bounceBack);
                    ImGui::SetItemTooltip("Bounce back an action if flagged.");

                    ImAdd::EndHighlightGroup();
                    ImGui::Indent(-10);
                }

                ImAdd::ToggleButtonClassic("Anti by Force ##4311", &force::toggle);
                ImGui::SetItemTooltip("Anti-Master Client by force. \nThis method uses manual detection.");
                
                if (force::toggle)
                {
                    ImGui::Indent(10);
                    ImAdd::BeginHighlightGroup();
                    
                    ImAdd::ToggleButtonClassic("During Loading ##4311", &force::duringLoading);
                    ImGui::SetItemTooltip("Allow setting yourself as master client during loading. \nThis can cause you to crash.");
                    
                    ImAdd::ToggleButtonClassic("Loading Fix ##4311", &force::loadingFix);
                    ImGui::SetItemTooltip("Prevent being master client during loading. \nThis attempts to fix/mitigate an exploit.");
                    
                    ImAdd::ToggleButtonClassic("Spam Mode ##4311", &force::spam);
                    ImGui::SetItemTooltip("Spam set yourself as master client. \nOnly use this if you know what you're doing.");
                    
                    ImAdd::ToggleButtonClassic("Restrict Offender ##4311", &force::restrictOffender);
                    ImGui::SetItemTooltip("\"Restrict\" the offender if flagged. \nYou can only recieve movement packets from a \"Restricted\" player.");
                    
                    ImAdd::ToggleButtonClassic("Bounce Back ##4311", &force::bounceBack);
                    ImGui::SetItemTooltip("Bounce back an action if flagged.");
                    
                    ImAdd::EndHighlightGroup();
                    ImGui::Indent(-10);
                }
                
                ImAdd::EndHighlightGroup();
                ImGui::Indent(-10);
            }
            
            #endif

            using namespace globals::photon::antis::outbound;
            
            ImAdd::ToggleButtonClassic("Squish Player", &squishPlayer); // ev202, ev204 opRaiseEvent
            ImGui::SetItemTooltip("Squish your player. \nEnable this before joining room.");
            if (squishPlayer)
            {
                ImGui::Indent(10);
                ImAdd::BeginHighlightGroup();

                static float internalScale[3] = {1.0, 1.0, 1.0};
                ImGui::InputFloat3("Scale ##12323", internalScale);
                playerScale.x = internalScale[0];
                playerScale.y = internalScale[1];
                playerScale.z = internalScale[2];

                ImAdd::EndHighlightGroup();
                ImGui::Indent(-10);
            }

            ImAdd::ToggleButtonClassic(("Vanish 2.0"), &blockPlayerInstantiation); // ev202, ev204 opRaiseEvent
            ImGui::SetItemTooltip("Vanish exploit 2 electric boogaloo. \nTurn on before joining room to go invisible.");
            if (blockPlayerInstantiation)
            {
                ImGui::Indent(10);
                ImAdd::BeginHighlightGroup();

                ImAdd::ToggleButtonClassic("Strict ##2442", &blockAllPlayerInstantiation);
                // ev202, ev204 opRaiseEvent
                ImGui::SetItemTooltip("Vanish 2.0 Strict Mode. \nInstantiated objects will only be created locally until this is toggled off.");

                ImAdd::EndHighlightGroup();
                ImGui::Indent(-10);
            }
        }
        
        ImGui::SeparatorText("Inbound");
        {
            namespace global = globals::photon::protections::inbound;

            {
                #ifndef CHEAP
                if (ImGui::CollapsingHeader("Bounce Back Config ##6716215"))
                {
                    ImGui::Indent(10);
                    ImAdd::BeginHighlightGroup();
                    
                    ImAdd::ToggleButtonClassic("During Loading ##6716215", &global::BounceBack::duringLoading);
                    ImGui::SetItemTooltip("Bounce back while your loading.");
                
                    ImGui::PushItemWidth(200);
                    ImGui::InputInt("Max Attempts ##6716215", &global::BounceBack::maxAttempts);
                    ImGui::PopItemWidth();
                    ImGui::SetItemTooltip("Maximum amount of attempts to remove a player by \"Bounce Back\".");

                    #ifndef PROD
                    ImAdd::ToggleButtonClassic("GAS ##6716215", &global::BounceBack::goToRoom);
                    ImGui::SetItemTooltip("Bounce back a GAS. \n(Orientation -> DormRoom)");
                    #endif
                    
                    ImAdd::ToggleButtonClassic("Kick ##6716215", &global::BounceBack::respawnAtInfinity);
                    ImGui::SetItemTooltip("Bounce back a Kick (by exploit).");
                    
                    ImAdd::ToggleButtonClassic("RAM Crash ##6716215", &global::BounceBack::bulletCrash);
                    ImGui::SetItemTooltip("Bounce Back a RAM Crash.");

                    #ifndef PROD
                    ImAdd::ToggleButtonClassic("Death ##6716215", &global::BounceBack::death);
                    ImGui::SetItemTooltip("Boune back a Death.");
                    #endif

                    ImAdd::EndHighlightGroup();
                    ImGui::Indent(-10);
                    ImGui::Separator();
                }
                #endif
            }
            
            ImAdd::ToggleButtonClassic("Drop Invalid Players", &global::dropInvalidActorEvents);
            ImGui::SetItemTooltip("Drop packets recieved from invalid players. \nThis can cause some strange bugs sometimes.");
            {
                ImAdd::ToggleButtonClassic("Movement Filter ##567567657", &global::Ev201::toggle);
                ImGui::SetItemTooltip("Filter movement packets.");
                if (global::Ev201::toggle)
                {
                    ImGui::Indent(10);
                    ImAdd::BeginHighlightGroup();
                
                    ImAdd::ToggleButtonClassic("Drop During Loading ##567567657", &global::Ev201::dropDuringLoading);
                    ImGui::SetItemTooltip("Drop movement packets during loading. \nEnabling this will cause faster loading times.");
                    if (global::Ev201::dropDuringLoading)
                    {
                        ImGui::Indent(10);
                        ImAdd::BeginHighlightGroup();
                    
                        ImAdd::ToggleButtonClassic("Strict ##567567657", &global::Ev201::dropDuringLoadingStrict);
                        ImGui::SetItemTooltip("Stricter check during loading. \nHigher performance impact.");

                        ImAdd::EndHighlightGroup();
                        ImGui::Indent(-10);
                    }
                    ImAdd::ToggleButtonClassic("Drop All Movement ##567567657", &global::Ev201::dropAllEvents);
                    ImGui::SetItemTooltip("Drop all movement packets.");
                    if (global::Ev201::dropAllEvents)
                    {
                        ImGui::Indent(10);
                        ImAdd::BeginHighlightGroup();
                    
                        ImAdd::ToggleButtonClassic("Drop Server ##567567657", &global::Ev201::dropServerEvents);
                        ImGui::SetItemTooltip("Drop movement packets sent from the server.");
                        ImAdd::ToggleButtonClassic("Drop Self ##567567657", &global::Ev201::dropSelfEvents);
                        ImGui::SetItemTooltip("Drop movement pacekts from from \"yourself\".");
                    
                        ImAdd::EndHighlightGroup();
                        ImGui::Indent(-10);
                    }

                    ImAdd::EndHighlightGroup();
                    ImGui::Indent(-10);
                    ImGui::Separator();
                }
            }
            #ifndef PROD
            {
                ImAdd::ToggleButtonClassic("RPC Filter ##2323232", &global::Ev200::toggle);
                ImGui::SetItemTooltip("Filter RPC packets.");
                if (global::Ev200::toggle)
                {
                    ImGui::Indent(10);
                    ImAdd::BeginHighlightGroup();
                
                    ImAdd::ToggleButtonClassic("Drop All RPCs ##2323232", &global::Ev200::dropAllEvents);
                    ImGui::SetItemTooltip("Drop all inbound RPC packets.");
                    if (global::Ev200::dropAllEvents)
                    {
                        ImGui::Indent(10);
                        ImAdd::BeginHighlightGroup();
                    
                        ImAdd::ToggleButtonClassic("Drop Server ##2323232", &global::Ev200::dropServerEvents);
                        ImGui::SetItemTooltip("Drop RPC packets sent from the server.");
                    
                        ImAdd::ToggleButtonClassic("Drop Self ##2323232", &global::Ev200::dropSelfEvents);
                        ImGui::SetItemTooltip("Drop RPC packets sent from \"yourself\".");
                    
                        ImAdd::EndHighlightGroup();
                        ImGui::Indent(-10);
                    }
                    ImAdd::ToggleButtonClassic("Filter Server ##2323232", &global::Ev200::filterServerEvents);
                    ImGui::SetItemTooltip("Filter RPCs sent from the server.");
                
                    ImAdd::ToggleButtonClassic("Filter Self ##2323232", &global::Ev200::filterSelfEvents);
                    ImGui::SetItemTooltip("Filter RPCs sent from \"yourself\".");

                    ImAdd::ToggleButtonClassic("Filter While Loading ##2323232", &global::Ev200::filterWhileLoading);
                    ImGui::SetItemTooltip("Filter RPCs while you're loading.");
                
                    ImAdd::ToggleButtonClassic("Filter Owned ##2323232", &global::Ev200::filterOwnedPhotonView);
                    ImGui::SetItemTooltip("Drop RPCs targetting objects you \"own\".");
                
                    ImAdd::ToggleButtonClassic("Filter Vectors ##2323232", &global::Ev200::filterVectorsLimit);
                    ImGui::SetItemTooltip("Filter Vectors in the RPC payload.");
                    if (global::Ev200::filterVectorsLimit)
                    {
                        ImGui::Indent(10);
                        ImAdd::BeginHighlightGroup();
                    
                        ImGui::PushItemWidth(200);
                        ImGui::InputFloat("Max Limit ##2323232", &global::Ev200::vectorsMinimumLimit);
                        ImGui::PopItemWidth();
                        ImGui::SetItemTooltip("Maximum value inside a vector.");
                    
                        ImGui::PushItemWidth(200);
                        ImGui::InputFloat("Min Limit ##2323232", &global::Ev200::vectorsMaximumLimit);
                        ImGui::PopItemWidth();
                        ImGui::SetItemTooltip("Minimum value inside a vector.");

                        ImAdd::EndHighlightGroup();
                        ImGui::Indent(-10);
                    }
                
                    ImAdd::ToggleButtonClassic("Rate Limit ##2323232", &global::Ev200::rateLimit);
                    ImGui::SetItemTooltip("Limit the rate at which you recieve RPC packets.");
                    if (global::Ev200::rateLimit)
                    {
                        ImGui::Indent(10);
                        ImAdd::BeginHighlightGroup();
                    
                        ImAdd::ToggleButtonClassic("During Loading ##2323232", &global::Ev200::rateLimitDuringLoading);
                        ImGui::SetItemTooltip("Apply the rate limit when your loading.");

                        ImGui::PushItemWidth(200);
                        ImGui::InputInt("Duration (ms) ##2323232", &global::Ev200::rateLimitMS);
                        ImGui::PopItemWidth();
                        ImGui::SetItemTooltip("Duration of rate limit in milliseconds.");
                    
                        ImGui::PushItemWidth(200);
                        ImGui::InputInt("Count ##2323232", &global::Ev200::rateLimitLimit);
                        ImGui::PopItemWidth();
                        ImGui::SetItemTooltip("Count of RPCs to count during the duration.");
                    
                        ImAdd::EndHighlightGroup();
                        ImGui::Indent(-10);
                    }

                    ImAdd::ToggleButtonClassic("Bounce Back ##2323232", &global::Ev200::bounceBack);
                    ImGui::SetItemTooltip("Bounce back an action if filters/rate limit is flagged.");
                
                    ImAdd::ToggleButtonClassic("Restrict Sender ##2323232", &global::Ev200::restrictActor);
                    ImGui::SetItemTooltip("\"Restrict\" the sender if filters/rate limit is flagged. \nYou can only recieve movement packets from a \"Restricted\" player.");
                
                    ImAdd::EndHighlightGroup();
                    ImGui::Indent(-10);
                    ImGui::Separator();
                }
            }
            #endif
            {
                ImAdd::ToggleButtonClassic("Item Spawn Filter ##0889213128", &global::Ev202::toggle);
                ImGui::SetItemTooltip("Filter Item Spawn packets.");
                if (global::Ev202::toggle)
                {
                    ImGui::Indent(10);
                    ImAdd::BeginHighlightGroup();

                    ImAdd::ToggleButtonClassic("Drop All Spawns ##0889213128", &global::Ev202::dropAllEvents);
                    ImGui::SetItemTooltip("Drop all item spawn packets.");
                    if (global::Ev202::dropAllEvents)
                    {
                        ImGui::Indent(10);
                        ImAdd::BeginHighlightGroup();

                        ImAdd::ToggleButtonClassic("Drop Server ##0889213128", &global::Ev202::dropServerEvents);
                        ImGui::SetItemTooltip("Drop item spawn packets recieved from the server.");
                    
                        ImAdd::ToggleButtonClassic("Drop Self ##0889213128", &global::Ev202::dropSelfEvents);
                        ImGui::SetItemTooltip("Drop item spawn packets recieved from \"yourself\".");

                        ImAdd::EndHighlightGroup();
                        ImGui::Indent(-10);
                    }
                    ImAdd::ToggleButtonClassic("Drop Malformed Payloads ##0889213128", &global::Ev202::dropMalformedPayload);
                    ImGui::SetItemTooltip("Drop malformed item spawn payloads. \nThis fixes a very common crash issue.");
                
                    ImAdd::ToggleButtonClassic("Object Filter ##0889213128", &global::Ev202::filterToggle);
                    ImGui::SetItemTooltip("Filter object information.");
                    if (global::Ev202::filterToggle)
                    {
                        ImGui::Indent(10);
                        ImAdd::BeginHighlightGroup();

                        ImAdd::ToggleButtonClassic("Filter During Loading ##0889213128", &global::Ev202::filterWhileLoading);
                        ImGui::SetItemTooltip("Enable the filter during loading.");
                        ImAdd::ToggleButtonClassic("Filter Server ##0889213128", &global::Ev202::filterServerEvents);
                        ImGui::SetItemTooltip("Filter objects spawned by the server.");
                    
                        ImAdd::ToggleButtonClassic("Filter Self ##0889213128", &global::Ev202::filterSelfEvents);
                        ImGui::SetItemTooltip("Filter objects spawned by \"yourself\".");
                    
                        ImAdd::ToggleButtonClassic("Filter Scale ##0889213128", &global::Ev202::filterScale);
                        ImGui::SetItemTooltip("Filter object scale.");
                        if (global::Ev202::filterScale)
                        {
                            ImGui::Indent(10);
                            ImAdd::BeginHighlightGroup();

                            const char* items[] = {"Unusual", "Limits", "Both"};
                            int current_item = static_cast<int>(global::Ev202::scaleFilterMode);

                            ImGui::PushItemWidth(200);
                            if (ImGui::Combo("Mode ##0889213123128", &current_item, items, IM_ARRAYSIZE(items)))
                            {
                                global::Ev202::scaleFilterMode = static_cast<global::Ev202::ScaleFilterMode>(current_item);
                            }
                            ImGui::PopItemWidth();
                            ImGui::SetItemTooltip("Scale filter detection mode. \nUnusual enusres scale values are equivilant. \nLimits ensures scale wont crash you.");

                            if (global::Ev202::scaleFilterMode >= global::Ev202::ScaleFilterMode::Limits)
                            {
                                ImGui::Indent(10);
                                ImAdd::BeginHighlightGroup();
                                ImGui::PushItemWidth(200);
                                ImGui::InputFloat("Min Scale ##0889213128", &global::Ev202::scaleMinimumLimit);
                                ImGui::PopItemWidth();
                                ImGui::SetItemTooltip("Minimum scale value.");
                                
                                ImGui::PushItemWidth(200);
                                ImGui::InputFloat("Max Scale ##0889213128", &global::Ev202::scaleMaximumLimit);
                                ImGui::PopItemWidth();
                                ImGui::SetItemTooltip("Maximum scale value.");

                                ImAdd::EndHighlightGroup();
                                ImGui::Indent(-10);
                            }
                        
                            ImAdd::EndHighlightGroup();
                            ImGui::Indent(-10);
                        }

                        ImAdd::ToggleButtonClassic("Drop Backpacks", &globals::photon::protections::inbound::Ev202::dropBackpacks);
                        ImGui::SetItemTooltip("Drop and destroy all backpacks. \nBounce Back/Restrict will not trigger.");
                        
                        ImAdd::ToggleButtonClassic("Filter Prefab ##0889213128", &global::Ev202::filterPrefab);
                        ImGui::SetItemTooltip("Filter prefab name. \nEach checkbox is a preset.");
                        if (global::Ev202::filterPrefab) //todo: add gui for presets
                        {
                            ImGui::Indent(10);
                            ImAdd::BeginHighlightGroup();

                            for (auto& [category, preset] : global::Ev202::blacklistedPrefabPresets) {
                                std::string label = category + "##Checkbox";
                                ImAdd::ToggleButtonClassic(label.c_str(), &preset.enabled);
                                ImGui::SetItemTooltip(preset.description.c_str());
                            }

                            ImAdd::EndHighlightGroup();
                            ImGui::Indent(-10);
                        }
                        ImAdd::ToggleButtonClassic("Filter Vectors ##0889213128", &global::Ev202::filterVectors);
                        ImGui::SetItemTooltip("Filter object vectors.");
                        if (global::Ev202::filterVectors)
                        {
                            ImGui::Indent(10);
                            ImAdd::BeginHighlightGroup();

                            ImAdd::ToggleButtonClassic("Filter Data Vectors ##0889213128", &global::Ev202::vectorsFilterData);
                            ImGui::SetItemTooltip("Filter vectors found in object data. \nThis is not recommended, you may crash.");

                            ImGui::PushItemWidth(200);
                            ImGui::InputFloat("Max Limit ##0889213128", &global::Ev202::vectorsMaximumLimit);
                            ImGui::PopItemWidth();
                            ImGui::SetItemTooltip("Maximum value inside a vector.");

                            ImGui::PushItemWidth(200);
                            ImGui::InputFloat("Min Limit ##0889213128", &global::Ev202::vectorsMinimumLimit);
                            ImGui::PopItemWidth();
                            ImGui::SetItemTooltip("Minimum value inside a vector.");

                            ImAdd::EndHighlightGroup();
                            ImGui::Indent(-10);
                        }
                    
                        ImAdd::EndHighlightGroup();
                        ImGui::Indent(-10);
                    }
                    ImAdd::ToggleButtonClassic("Rate Limit ##0889213128", &global::Ev202::rateLimit);
                    ImGui::SetItemTooltip("Limit the rate at which you recieve item spawn packets.");
                    if (global::Ev202::rateLimit)
                    {
                        ImGui::Indent(10);
                        ImAdd::BeginHighlightGroup();

                        ImAdd::ToggleButtonClassic("During Loading ##0889213128", &global::Ev202::rateLimitDuringLoading);
                        ImGui::SetItemTooltip("Enable rate limit during loading. \nNot recommended because player spawns alot during loading.");

                        ImGui::PushItemWidth(200);
                        ImGui::InputInt("Duration (ms) ##0889213128", &global::Ev202::rateLimitMS);
                        ImGui::PopItemWidth();
                        ImGui::SetItemTooltip("Duration of rate limit in milliseconds.");

                        ImGui::PushItemWidth(200);
                        ImGui::InputInt("Count ##0889213128", &global::Ev202::rateLimitLimit);
                        ImGui::PopItemWidth();
                        ImGui::SetItemTooltip("Count of item spawn packets to count during the duration.");

                        ImAdd::EndHighlightGroup();
                        ImGui::Indent(-10);
                    }
                    ImAdd::ToggleButtonClassic("Total Spawns Limit ##0889213128", &global::Ev202::totalActorLimit);
                    ImGui::SetItemTooltip("Total amount of times a player can send item spawn packets before being detected.");
                    if (global::Ev202::totalActorLimit)
                    {
                        ImGui::Indent(10);
                        ImAdd::BeginHighlightGroup();

                        ImGui::PushItemWidth(200);
                        ImGui::InputInt("Count ##0889213128123", &global::Ev202::totalActorLimitAmount);
                        ImGui::PopItemWidth();
                        ImGui::SetItemTooltip("Count of item spawn packets before being detected.");

                        ImAdd::EndHighlightGroup();
                        ImGui::Indent(-10);
                    }
                    ImAdd::ToggleButtonClassic("Drop Detected ##0889213128", &global::Ev202::dropDetectedEvent);
                    ImGui::SetItemTooltip("Drop detected packet.");
                
                    ImAdd::ToggleButtonClassic("Destroy Detected Object ##0889213128", &global::Ev202::destroyDetectedPrefab);
                    ImGui::SetItemTooltip("Destroy detected object (server-side).");
                
                    ImAdd::ToggleButtonClassic("Announce Offender ##0889213128", &global::Ev202::announceOffender);
                    ImGui::SetItemTooltip("Announce the filter/rate limit offender to the server.");

                    #ifndef CHEAP
                    ImAdd::ToggleButtonClassic("Bounce Back ##0889213128", &global::Ev202::bounceBack);
                    ImGui::SetItemTooltip("Bounce back an action if filters/rate limit is flagged.");
                    #endif

                    #ifndef PROD
                    ImAdd::ToggleButtonClassic("Restrict Sender ##0889213128", &global::Ev202::restrictActor);
                    ImGui::SetItemTooltip("\"Restrict\" the sender if filters/rate limit is flagged. \nYou can only recieve movement packets from a \"Restricted\" player.");
                    #endif

                    ImAdd::EndHighlightGroup();
                    ImGui::Indent(-10);
                    ImGui::Separator();
                }
            }
            #ifndef CHEAP
            {
                ImAdd::ToggleButtonClassic("Destroy Filter ##222434575", &global::Ev204::toggle);
                ImGui::SetItemTooltip("Filter object destroy packets.");
                if (global::Ev204::toggle)
                {
                    ImGui::Indent(10);
                    ImAdd::BeginHighlightGroup();
                
                    ImAdd::ToggleButtonClassic("Drop All Destroys ##222434575", &global::Ev204::dropAllEvents);
                    ImGui::SetItemTooltip("Drop all destroy packets.");
                    if (global::Ev204::dropAllEvents)
                    {
                        ImGui::Indent(10);
                        ImAdd::BeginHighlightGroup();
                    
                        ImAdd::ToggleButtonClassic("Drop Server ##222434575", &global::Ev204::dropServerEvents);
                        ImGui::SetItemTooltip("Drop item destroy packets recieved from the server.");
                    
                        ImAdd::ToggleButtonClassic("Drop Self ##222434575", &global::Ev204::dropSelfEvents);
                        ImGui::SetItemTooltip("Drop item destroy packets recieved from \"yourself\".");
                    
                        ImAdd::EndHighlightGroup();
                        ImGui::Indent(-10);
                    }
                    ImAdd::ToggleButtonClassic("Filter Owned Objects ##222434575", &global::Ev204::filterOwnedPhotonView);
                    ImGui::SetItemTooltip("Filter if you \"own\" the object.");
                
                    ImAdd::ToggleButtonClassic("Bounce Back ##222434575", &global::Ev204::bounceBack);
                    ImGui::SetItemTooltip("Bounce back an action if filter is flagged.");
                
                    ImAdd::ToggleButtonClassic("Restrict Sender ##222434575", &global::Ev204::restrictActor);
                    ImGui::SetItemTooltip("\"Restrict\" the sender if filter is flagged. \nYou can only recieve movement packets from a \"Restricted\" player.");
                    
                    ImAdd::EndHighlightGroup();
                    ImGui::Indent(-10);
                    ImGui::Separator();
                }
            }
            {
                ImAdd::ToggleButtonClassic("Destroy Player Filter ##98128671", &global::Ev207::toggle);
                ImGui::SetItemTooltip("Filter player destroy packets.");
                if (global::Ev207::toggle)
                {
                    ImGui::Indent(10);
                    ImAdd::BeginHighlightGroup();

                    ImAdd::ToggleButtonClassic("Drop All Player Destroys ##98128671", &global::Ev207::dropAllEvents);
                    ImGui::SetItemTooltip("Drop all player destroy packets.");
                    if (global::Ev207::dropAllEvents)
                    {
                        ImGui::Indent(10);
                        ImAdd::BeginHighlightGroup();

                        ImAdd::ToggleButtonClassic("Drop Server ##98128671", &global::Ev207::dropServerEvents);
                        ImGui::SetItemTooltip("Drop player destroy packets recieved from the server.");
                    
                        ImAdd::ToggleButtonClassic("Drop Self ##98128671", &global::Ev207::dropSelfEvents);
                        ImGui::SetItemTooltip("Drop player destroy packets recieved from \"yourself\".");

                        ImAdd::EndHighlightGroup();
                        ImGui::Indent(-10);
                    }
                    ImAdd::ToggleButtonClassic("Bounce Back ##98128671", &global::Ev207::bounceBack);
                    ImGui::SetItemTooltip("Bounce back an action if filter is flagged.");
                
                    ImAdd::ToggleButtonClassic("Restrict Sender ##98128671", &global::Ev207::restrictActor);
                    ImGui::SetItemTooltip("\"Restrict\" the sender if filter is flagged. \nYou can only recieve movement packets from a \"Restricted\" player.");

                    ImAdd::EndHighlightGroup();
                    ImGui::Indent(-10);
                    ImGui::Separator();
                }
            }
            #endif
        }
        
        ImGui::SeparatorText("Outbound");
        {
            using namespace globals::photon::antis::outbound;

            ImGui::Indent(10);
            ImAdd::BeginHighlightGroup();

            ImAdd::ToggleButtonClassic(("Block All Events ##4511"), &blockAllToggle); // all events OvEvent
            ImGui::SetItemTooltip("Block all sent events.");
            if (blockAllToggle)
            {
                ImGui::Indent(10);
                ImAdd::BeginHighlightGroup();

                ImAdd::ToggleButtonClassic("Block Anti-Cheat ##89374", &blockAntiCheatToggle);
                ImGui::SetItemTooltip("Block Ev3 (EAC Heartbeat Event).");

                ImAdd::EndHighlightGroup();
                ImGui::Indent(-10);
            }

            ImAdd::ToggleButtonClassic(("Block Movement ##343434"), &blockMovementToggle); // ev201 opRaiseEvent
            ImGui::SetItemTooltip("Block sent movement events.");
#ifndef PROD
            ImGui::Spacing();
            ImAdd::ToggleButtonClassic(("Debug ##94851"), &debugToggle); // ev201 opRaiseEvent
            ImGui::SetItemTooltip("Debug sent events.");
            if (debugToggle)
            {
                ImGui::Indent(10);
                ImAdd::BeginHighlightGroup();

                ImAdd::ToggleButtonClassic("Debug Anti-Cheat ##87347", &debugAntiCheatToggle);
                ImGui::SetItemTooltip("Debug Ev3 (EAC Heartbeat Event).");

                ImAdd::EndHighlightGroup();
                ImGui::Indent(-10);
            }
#endif

            ImAdd::EndHighlightGroup();
            ImGui::Indent(-10);
        }
    }
    ImGui::EndChild();
}


#ifdef OLDINBOUND
        ImGui::SeparatorText("Inbound");
        {
            using namespace globals::photon::antis::inbound;

            ImGui::Indent(10);
            ImAdd::BeginHighlightGroup();
#ifndef PROD
            if (ImAdd::ToggleButtonClassic("Anti-Royalty##339", &masterClientRequest))
                globals::Ihooks::setMasterClient = masterClientRequest;
            ImGui::SetItemTooltip("Block Master Client switch requests.");

            if (masterClientRequest)
            {
                ImGui::Indent(10);
                ImAdd::BeginHighlightGroup();

                ImAdd::ToggleButtonClassic("Debug Anti-Royalty", &masterClientDebug);
                ImGui::SetItemTooltip("Debug Anti-MasterClient.");
                ImAdd::ToggleButtonClassic("Strict (Callback) ##44545", &globals::Ihooks::OnMasterClientSwitched);
                ImGui::SetItemTooltip(
                    "Set yourself as master client if a Master Client switch is detected. \nBy callback.");
                ImAdd::ToggleButtonClassic("Force ##44545", &masterClientForceMode);
                ImGui::SetItemTooltip(
                    "Set yourself as master client if a Master Client switch is detected. \nBy detection.");
                if (globals::Ihooks::OnMasterClientSwitched || masterClientForceMode)
                {
                    ImAdd::ToggleButtonClassic("Bounce Back ##44", &masterClientBounceBack);
                    ImGui::SetItemTooltip(
                        "Bounce back a Crash when someone forces Master Client. \nOnly cheaters and vmods can do this.");
                    if (masterClientBounceBack)
                    {
                        ImGui::Indent(10);
                        ImAdd::BeginHighlightGroup();

                        const char* items[] = {"RAM Crash", "Death"};
                        int current_item = static_cast<int>(masterClientBounceBackMode);

                        ImGui::PushItemWidth(200);
                        if (ImGui::Combo("Mode ##2368712", &current_item, items, IM_ARRAYSIZE(items)))
                        {
                            masterClientBounceBackMode = static_cast<globals::photon::antis::BounceBackMode>(
                                current_item);
                        }
                        ImGui::PopItemWidth();
                        ImGui::SetItemTooltip(
                            "RAM Crash: Less stable, more reliable. \nDeath: More stable, less reliable");

                        ImAdd::EndHighlightGroup();
                        ImGui::Indent(-10);
                    }
                }
                if (masterClientForceMode)
                {
                    ImAdd::ToggleButtonClassic(("Block Offender's Events ##43434"), &masterClientBlockOffender);
                    ImGui::SetItemTooltip("Block the offender's events. ##3434343");
                }

                ImAdd::EndHighlightGroup();
                ImGui::Indent(-10);
            }

            ImAdd::ToggleButtonClassic("Block Movement During Loading", &blockMovementDuringLoad);
            ImGui::SetItemTooltip(
                "Block movement events during loading. \nThis fixes some not so rare crash issues & speeds up loading time.");
            if (blockMovementDuringLoad)
            {
                ImGui::Indent(10);
                ImAdd::BeginHighlightGroup();

                ImAdd::ToggleButtonClassic("Strict ##983981", &blockMovementDuringLoadStrict);
                ImGui::SetItemTooltip("Harsher check for loading. \nThis is more preformance intensive.");

                ImAdd::EndHighlightGroup();
                ImGui::Indent(-10);
            }

            ImAdd::ToggleButtonClassic("Block RPCs During Loading", &blockRpcsDuringLoad);
            ImGui::SetItemTooltip(
                "Block RPC events during loading. \nThis fixes some not so rare crash issues & speeds up loading time.");
            if (blockRpcsDuringLoad)
            {
                ImGui::Indent(10);
                ImAdd::BeginHighlightGroup();

                ImAdd::ToggleButtonClassic("Strict ##3424512", &blockRpcsDuringLoadStrict);
                ImGui::SetItemTooltip("Harsher check for loading. \nThis is more preformance intensive.");

                ImAdd::ToggleButtonClassic("Block Server RPCs ##345345", &blockRpcsDuringLoadBlockServer);
                ImGui::SetItemTooltip("Block RPCs sent by server.");

                ImAdd::EndHighlightGroup();
                ImGui::Indent(-10);
            }

            ImGui::Spacing();
            ImAdd::ToggleButtonClassic(("Debug ##98743887"), &debugToggle);
            ImGui::SetItemTooltip("Debug recieved events.");
            if (debugToggle)
            {
                ImGui::Indent(10);
                ImAdd::BeginHighlightGroup();

                ImAdd::ToggleButtonClassic("Debug Anti-Cheat ##87341", &debugAntiCheatToggle);
                ImGui::SetItemTooltip("Debug Ev3 (EAC Heartbeat Event).");

                ImAdd::EndHighlightGroup();
                ImGui::Indent(-10);
            }
#endif

            ImAdd::ToggleButtonClassic(("Anti-Freeze"), &blockFreezeToggle); // ev204 OnEvent
            ImGui::SetItemTooltip("Attempt to block Freeze exploit. \nTurn off while switching rooms.");
            ImAdd::ToggleButtonClassic(("Anti-Ev207"), &blockEv207Toggle); // ev204, ev207 OnEvent
            ImGui::SetItemTooltip("Block DestroyPlayer event (Ev207).");
#ifndef PROD
            ImAdd::ToggleButtonClassic(("Anti-Bye-Bye"), &blockByeByeToggle); // ev204, ev200, ev202 OnEvent
            ImGui::SetItemTooltip("Attempt to block Bye Bye exploit.");
            ImAdd::ToggleButtonClassic(("Anti-Ev204 Strict"), &blockEv204Toggle); // ev204 OnEvent
            ImGui::SetItemTooltip("Block all 204 (\"Destroy\") events. \nTurn off while switching rooms.");
#endif
            ImGui::Spacing();

            ImAdd::ToggleButtonClassic("Block RPCs", &blockAllRPCs);
            ImGui::SetItemTooltip("Block all RPC events.");

            ImAdd::ToggleButtonClassic(("Block All Events ##787878"), &blockAllToggle); // all events OvEvent
            ImGui::SetItemTooltip("Block all recieved events.");
            if (blockAllToggle)
            {
                ImGui::Indent(10);
                ImAdd::BeginHighlightGroup();

                ImAdd::ToggleButtonClassic("Block Anti-Cheat ##8374837", &blockAntiCheatToggle);
                ImGui::SetItemTooltip("Block Ev3 (EAC Heartbeat Event).");

                ImAdd::EndHighlightGroup();
                ImGui::Indent(-10);
            }

            ImAdd::ToggleButtonClassic(("Block Movement ##7878"), &blockMovementToggle); // ev201 OnEvent
            ImGui::SetItemTooltip("Block recieved movement events.");

            ImGui::Separator();

            ImAdd::ToggleButtonClassic(("Sanitize RPCs"), &sanitizeEv200Toggle);
            ImGui::SetItemTooltip("Block RPCs based on config.");

            if (sanitizeEv200Toggle)
            {
                ImGui::Indent(10);
                ImAdd::BeginHighlightGroup();

                const char* items[] = {"Owned", "Limits", "Both"};
                int current_item = static_cast<int>(sanitizeEv200Mode);

                ImGui::PushItemWidth(200);
                if (ImGui::Combo("Mode ##4564544411", &current_item, items, IM_ARRAYSIZE(items)))
                {
                    sanitizeEv200Mode = static_cast<SanitizeEv200Mode>(current_item);
                }
                ImGui::PopItemWidth();
                ImGui::SetItemTooltip(
                    "Owned: Checks if RPC target is owned by you. \Limits: ensures payload values are within limits. \n Both: both of the above.");

                if (sanitizeEv200Mode >= SanitizeEv200Mode::Limits)
                {
                    ImGui::Indent(10);
                    ImAdd::BeginHighlightGroup();

                    ImGui::Text("Vector Limits: ##89743");

                    ImGui::PushItemWidth(300);
                    ImGui::InputFloat("max ##77777", &maxVectors);
                    ImGui::InputFloat("min ##77777", &minVectors);
                    ImGui::PopItemWidth();

                    ImAdd::EndHighlightGroup();
                    ImGui::Indent(-10);
                }

                ImAdd::ToggleButtonClassic(("Bounce Back ##89737"), &sanitizeEv200BounceBack);
                if (sanitizeEv200BounceBack)
                {
                    ImGui::Indent(10);
                    ImAdd::BeginHighlightGroup();
                    const char* items[] = {"RAM Crash", "Death"};
                    int current_item = static_cast<int>(sanitizeEv200BounceBackMode);

                    ImGui::PushItemWidth(200);
                    if (ImGui::Combo("Mode ##4354536", &current_item, items, IM_ARRAYSIZE(items)))
                    {
                        sanitizeEv200BounceBackMode = static_cast<globals::photon::antis::BounceBackMode>(current_item);
                    }
                    ImGui::PopItemWidth();
                    ImGui::SetItemTooltip("RAM Crash: Less stable, more reliable. \nDeath: More stable, less reliable");
                    ImAdd::EndHighlightGroup();
                    ImGui::Indent(-10);
                }

                ImAdd::EndHighlightGroup();
                ImGui::Indent(-10);
            }

            ImGui::Separator();

            ImAdd::ToggleButtonClassic(("Prefab Anti Cheat"), &antiCheat::toggle); // ev202 OnEvent
            if (antiCheat::toggle)
            {
                ImGui::Indent(10);
                ImAdd::BeginHighlightGroup();
                ImAdd::ToggleButtonClassic(("Pause During Loading"), &antiCheat::pauseOnLoading);
                ImGui::SetItemTooltip("Pause the Anti-Cheat during loading.");
                ImAdd::ToggleButtonClassic(("Ignore Server Spawns"), &antiCheat::excludeServerEvents);
                ImGui::SetItemTooltip("Ignore spawns made by the Server.");
                ImAdd::ToggleButtonClassic(("Block Detected Events"), &antiCheat::blockEvent);
                ImGui::SetItemTooltip(
                    "Block detected spawn events. \nThe detected prefabs will not exist locally but they will for others.");
                ImAdd::ToggleButtonClassic(("Destroy Prefab"), &antiCheat::destroyPrefab);
                ImGui::SetItemTooltip(
                    "Destroy the offending prefab for OTHERS. \nTurn on \"Block Detected Events\" to block the prefabs spawning on your client!");

                ImAdd::ToggleButtonClassic(("Bounce Back"), &antiCheat::bounceBack);
                ImGui::SetItemTooltip("Bounce back a RAM Crash to the offender.");
                if (antiCheat::bounceBack)
                {
                    ImGui::Indent(10);
                    ImAdd::BeginHighlightGroup();

                    const char* items[] = {"RAM Crash", "Death"};
                    int current_item = static_cast<int>(antiCheat::bounceBackMode);

                    ImGui::PushItemWidth(200);
                    if (ImGui::Combo("Mode ##6547567", &current_item, items, IM_ARRAYSIZE(items)))
                    {
                        antiCheat::bounceBackMode = static_cast<globals::photon::antis::BounceBackMode>(current_item);
                    }
                    ImGui::PopItemWidth();
                    ImGui::SetItemTooltip("RAM Crash: Less stable, more reliable. \nDeath: More stable, less reliable");

                    ImAdd::EndHighlightGroup();
                    ImGui::Indent(-10);
                }

                ImAdd::ToggleButtonClassic(("Announce Offender"), &antiCheat::announceOffender);
                ImGui::SetItemTooltip("Announce the Offender by MessageAllPL.");

                ImAdd::ToggleButtonClassic(("Block Offender's Events"), &antiCheat::blockOffenderEvents);
                ImGui::SetItemTooltip("Block the offender's events.");

                ImGui::Separator();

                ImAdd::ToggleButtonClassic(("Developer Items"), &antiCheat::developerPrefabs);
                ImGui::SetItemTooltip("Blacklist developer-only prefabs.");
                ImAdd::ToggleButtonClassic(("Common Items"), &antiCheat::commonPrefabs);
                ImGui::SetItemTooltip(
                    "Blacklist commonly spawned prefabs (by cheaters). \nsidenote: do not use this in #RROs");
                ImAdd::ToggleButtonClassic(("Bosses"), &antiCheat::bossPrefabs);
                ImGui::SetItemTooltip("Blacklist quest boss prefabs.");
                ImAdd::ToggleButtonClassic(("Managers"), &antiCheat::managerPrefabs);
                ImGui::SetItemTooltip("Blacklist manager chip prefabs.");
                ImAdd::ToggleButtonClassic(("Enemies"), &antiCheat::enemyPrefabs);
                ImGui::SetItemTooltip("Blacklist quest enemy prefabs.");

                ImAdd::ToggleButtonClassic(("Bad Scale"), &antiCheat::scaleCheck);
                ImGui::SetItemTooltip("Check for bad prefab scale.");

                if (antiCheat::scaleCheck)
                {
                    ImGui::Indent(10);
                    ImAdd::BeginHighlightGroup();

                    const char* items[] = {"Unusual", "Limits", "Both"};
                    int current_item = static_cast<int>(antiCheat::scaleMode);

                    ImGui::PushItemWidth(200);
                    if (ImGui::Combo("Mode ##93749378", &current_item, items, IM_ARRAYSIZE(items)))
                    {
                        antiCheat::scaleMode = static_cast<antiCheat::BadScaleMode>(current_item);
                    }
                    ImGui::PopItemWidth();
                    ImGui::SetItemTooltip(
                        "Unusual: checks if xyz aren't equal (this cannot be achieved without using cheats). \nLimits: ensures values are within limits. \nBoth: both of the above.");

                    if (antiCheat::scaleMode >= antiCheat::BadScaleMode::Limits)
                    {
                        ImGui::Text("Scale Limits:");

                        ImGui::PushItemWidth(300);
                        ImGui::InputFloat("max ##4444", &antiCheat::maxScale);
                        ImGui::InputFloat("min ##4444", &antiCheat::minScale);
                        ImGui::PopItemWidth();
                    }

                    ImAdd::EndHighlightGroup();
                    ImGui::Unindent(10);
                }

                ImAdd::ToggleButtonClassic(("Bad Vectors"), &antiCheat::vectorsCheck);
                ImGui::SetItemTooltip("Check for bad position/rotation vectors.");
                if (antiCheat::vectorsCheck)
                {
                    ImGui::Indent(10);
                    ImAdd::BeginHighlightGroup();

                    ImAdd::ToggleButtonClassic(("Strict ##8738374"), &antiCheat::vectorsCheckStrict);
                    ImGui::SetItemTooltip(
                        "Check for bad vectors in prefab data. \nNot recommended because this data can relate to anything (not just position/rotation).");
                    ImGui::Spacing();

                    ImGui::Text("Vector Limits:");

                    ImGui::PushItemWidth(300);
                    ImGui::InputFloat("max ##5555", &antiCheat::maxVectors);
                    ImGui::InputFloat("min ##5555", &antiCheat::minVectors);
                    ImGui::PopItemWidth();

                    ImAdd::EndHighlightGroup();
                    ImGui::Unindent(10);
                }

                ImAdd::EndHighlightGroup();
                ImGui::Unindent(10);
            }

            ImAdd::EndHighlightGroup();
            ImGui::Indent(-10);
        }
#endif